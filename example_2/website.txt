package main

import (
	"context"
	"fmt"
	"github.com/ethereum/go-ethereum/accounts/abi/bind/v2"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
	"io"
	"math/big"
	"os"
	"path"
	"strings"
)

// NOTE: do not EVER embed secrets in the source code like this in production code
var (
	key        = "{\"address\":\"85755d82a3adc23598b887a6c33a2508b4b71e5a\",\"crypto\":{\"cipher\":\"aes-128-ctr\",\"ciphertext\":\"9631b0f23356c128bb8116207fda102951ba802da2a4e6f4cc1fc4f80c5e424a\",\"cipherparams\":{\"iv\":\"d3c8ceabd915abd50e85deafe15979aa\"},\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"n\":262144,\"p\":1,\"r\":8,\"salt\":\"217cae8c2d765f3d6bfdbab3a8f145364fd2adf10183e9fbaea4b3ffb00404d9\"},\"mac\":\"4ccf3a9847f41af5ae15d0c67a3929e3375476f8b1982ff24041c810d7aa76ab\"},\"id\":\"ee4c195b-c2ea-4951-9f33-28502fa85734\",\"version\":3}"
	passphrase = "asdfasdfasdf"
	address    = common.HexToAddress("0x98c54BE290f1B8446afF970e2D9489466b03122e")
)

func main() {
	// Create an IPC-based RPC connection to a remote node
	// NOTE update the path to the ipc file!
	conn, err := ethclient.Dial("/home/go-ethereum/sepolia/geth.ipc")
	if err != nil {
		panic(fmt.Errorf("Failed to connect to the Ethereum client: %v", err))
	}
	// Retrieve the current chain ID
	chainID, err := conn.ChainID(context.Background())
	if err != nil {
		panic(fmt.Errorf("failed to retrieve chain ID: %v", err))
	}
    
	// create auth for tx signing from the key on disk
	json, err := io.ReadAll(strings.NewReader(key))
	if err != nil {
		panic(fmt.Errorf("failed to read key: %v", err))
	}
	key, err := keystore.DecryptKey(json, passphrase)
	if err != nil {
		panic(fmt.Errorf("failed to decrypt key: %v", err))
	}

	address := common.HexToAddress("0x98c54BE290f1B8446afF970e2D9489466b03122e")

	// create a BoundContract instance to interact with the pending contract
	storageABI, _ := StorageMetaData.ParseABI()
	contract := Storage{*storageABI}
	instance := contract.Instance(conn, address)

	// Create an authorized transactor
	auth := bind.NewKeyedTransactor(key.PrivateKey, chainID)

	// send a transaction which calls the store function
	tx, err := bind.Transact(instance, auth, contract.PackStore(big.NewInt(42069)))
	if err != nil {
		panic(fmt.Errorf("failed to submit transaction: %v", err))
	}

	// wait for transaction inclusion
	if _, err := bind.WaitMined(context.Background(), conn, tx.Hash()); err != nil {
		panic(fmt.Errorf("error waiting for tx inclusion: %v", err))
	}

	fmt.Println("transaction invoking store method was successfully included")
}
